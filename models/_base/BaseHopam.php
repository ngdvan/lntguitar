<?php

/**
 * This is the model base class for the table "{{hopam}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Hopam".
 *
 * Columns in table "{{hopam}}" available as properties of the model,
 * followed by relations of table "{{hopam}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $lyrics
 * @property string $embed_code
 * @property integer $tid
 * @property integer $view
 * @property integer $ban_id
 * @property integer $user_id
 * @property string $guider
 * @property integer $create_time
 * @property string $tags
 * @property integer $update_time
 * @property integer $status
 * @property string $image
 * @property string $ban_artist
 *
 * @property Ban $ban
 * @property Term $t
 * @property XfUser $user
 * @property HopamComment[] $hopamComments
 * @property LikeHopam[] $likeHopams
 * @property RateHopam[] $rateHopams
 */
abstract class BaseHopam extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{hopam}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Hợp âm', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('title,lyrics, tid, ban_artist', 'required'),
			array('tid, view, ban_id, user_id, create_time, update_time, status', 'numerical', 'integerOnly'=>true),
			array('title,image, tags,ban_artist', 'length', 'max'=>255),
			array('guider', 'length', 'max'=>100),
			array('lyrics, embed_code', 'safe'),
            array('lyrics', 'file', 'types'=>'xml','allowEmpty'=>true, 'on'=>'update'),
			array('lyrics, embed_code, view, user_id, guider, create_time, tags, update_time, status', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, title, lyrics, embed_code, tid, view, ban_id, user_id, guider, create_time, tags, update_time, status', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'ban' => array(self::BELONGS_TO, 'Ban', 'ban_id'),
			't' => array(self::BELONGS_TO, 'Term', 'tid'),
			'user' => array(self::BELONGS_TO, 'XfUser', 'user_id'),
			'hopamComments' => array(self::HAS_MANY, 'HopamComment', 'hopam_id'),
			'commentCount' => array(self::STAT, 'HopamComment', 'hopam_id'),
			'likeHopams' => array(self::HAS_MANY, 'LikeHopam', 'hopam_id'),
			'likeCount' => array(self::STAT, 'LikeHopam', 'hopam_id'),
			'rateHopams' => array(self::HAS_MANY, 'RateHopam', 'hopam_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'title' => Yii::t('app', 'Tiêu đề'),
			'lyrics' => Yii::t('app', 'Lời'),
			'embed_code' => Yii::t('app', 'Mã nhúng'),
			'tid' => null,
			'view' => Yii::t('app', 'Lượt xem'),
			'ban_id' => null,
			'user_id' => null,
			'guider' => Yii::t('app', 'Người hướng dẫn'),
			'create_time' => Yii::t('app', 'Ngày đăng'),
			'tags' => Yii::t('app', 'Tags'),
			'update_time' => Yii::t('app', 'Update Time'),
			'status' => Yii::t('app', 'Trạng thái'),
			'ban' => null,
			't' => null,
			'user' => null,
			'hopamComments' => null,
			'likeHopams' => null,
			'rateHopams' => null,
			'image' => Yii::t('app', 'Hình ảnh'),
			'ban_artist' => Yii::t('app', 'Ca sĩ/Ban nhạc'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('lyrics', $this->lyrics, true);
		$criteria->compare('embed_code', $this->embed_code, true);
		$criteria->compare('tid', $this->tid);
		//$criteria->compare('view', $this->view);
		$criteria->compare('ban_artist', $this->ban_artist,true);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('guider', $this->guider, true);
		$criteria->compare('create_time', $this->create_time);
		$criteria->compare('tags', $this->tags, true);
		$criteria->compare('update_time', $this->update_time);
		$criteria->compare('status', $this->status);
		$criteria->compare('image', $this->image, true);
        /*if(isset($this->ban_id) && is_array($this->ban_id) && !empty($this->ban_id)){
            if($this->title){
                $criteria->addInCondition('ban_id',$this->ban_id,'OR');
            }else{
                $criteria->addInCondition('ban_id',$this->ban_id);
            }
        }else{
            $criteria->compare('ban_id', $this->ban_id);

        }*/
        $criteria->order = 'id DESC, view DESC';
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
            'pagination'=>array(
                'pageSize'=>Yii::app()->params['itemsPerPage'],
            ),
		));
	}
}