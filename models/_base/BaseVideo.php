<?php

/**
 * This is the model base class for the table "{{video}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Video".
 *
 * Columns in table "{{video}}" available as properties of the model,
 * followed by relations of table "{{video}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $body
 * @property string $link_youtube
 * @property string $image
 * @property string $file_path
 * @property integer $term_id
 * @property integer $view
 * @property integer $teacher_id
 * @property integer $create_time
 * @property integer $update_time
 * @property integer $status
 * @property integer $user_id
 * @property string $tags
 *
 * @property LikeVideo[] $likeVideos
 * @property Teacher $teacher
 * @property Term $term
 * @property XfUser $user
 * @property VideoComment[] $videoComments
 */
abstract class BaseVideo extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{video}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Video|Videos', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('title, term_id,teacher_id', 'required'),
			array('term_id, view, teacher_id, create_time, update_time, status, user_id', 'numerical', 'integerOnly'=>true),
			array('title, link_youtube, image, file_path, tags', 'length', 'max'=>255),
			array('body', 'safe'),
			array('body, link_youtube, image, file_path, view, teacher_id, create_time, update_time, status, user_id, tags', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, title, body, link_youtube, image, file_path, term_id, view, teacher_id, create_time, update_time, status, user_id, tags', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'likeVideos' => array(self::HAS_MANY, 'LikeVideo', 'video_id'),
			'likeCount' => array(self::STAT, 'LikeVideo', 'video_id'),
			'teacher' => array(self::BELONGS_TO, 'Teacher', 'teacher_id'),
			'term' => array(self::BELONGS_TO, 'Term', 'term_id'),
			'user' => array(self::BELONGS_TO, 'XfUser', 'user_id'),
			'videoComments' => array(self::HAS_MANY, 'VideoComment', 'video_id'),
			'commentCount' => array(self::STAT, 'VideoComment', 'video_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'title' => Yii::t('app', 'Tên'),
			'body' => Yii::t('app', 'Miêu tả'),
			'link_youtube' => Yii::t('app', 'Link Youtube'),
			'image' => Yii::t('app', 'Hình ảnh'),
			'file_path' => Yii::t('app', 'File Path'),
			'term_id' => null,
			'view' => Yii::t('app', 'Lượt xem'),
			'teacher_id' => null,
			'create_time' => Yii::t('app', 'Ngày đăng'),
			'update_time' => Yii::t('app', 'Ngày cập nhật'),
			'status' => Yii::t('app', 'Trạng thái'),
			'user_id' => null,
			'tags' => Yii::t('app', 'Tags'),
			'likeVideos' => null,
			'teacher' => null,
			'term' => null,
			'user' => null,
			'videoComments' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('body', $this->body, true);
		$criteria->compare('link_youtube', $this->link_youtube, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('file_path', $this->file_path, true);
		$criteria->compare('term_id', $this->term_id);
		$criteria->compare('view', $this->view);
		$criteria->compare('teacher_id', $this->teacher_id);
		$criteria->compare('create_time', $this->create_time);
		$criteria->compare('update_time', $this->update_time);
		$criteria->compare('status', $this->status);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('tags', $this->tags, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
            'pagination'=>array(
                'pageSize'=>Yii::app()->params['itemsPerPage'],
            ),
		));
	}
}