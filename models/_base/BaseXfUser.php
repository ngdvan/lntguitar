<?php

/**
 * This is the model base class for the table "xf_user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "XfUser".
 *
 * Columns in table "xf_user" available as properties of the model,
 * followed by relations of table "xf_user" available as properties of the model.
 *
 * @property integer $user_id
 * @property string $username
 * @property string $email
 * @property string $gender
 * @property string $custom_title
 * @property string $language_id
 * @property string $style_id
 * @property string $timezone
 * @property integer $visible
 * @property string $user_group_id
 * @property string $secondary_group_ids
 * @property string $display_style_group_id
 * @property string $permission_combination_id
 * @property string $message_count
 * @property integer $conversations_unread
 * @property string $register_date
 * @property string $last_activity
 * @property string $trophy_points
 * @property integer $alerts_unread
 * @property string $avatar_date
 * @property integer $avatar_width
 * @property integer $avatar_height
 * @property string $gravatar
 * @property string $user_state
 * @property integer $is_moderator
 * @property integer $is_admin
 * @property integer $is_banned
 * @property string $like_count
 * @property string $warning_points
 * @property string $role
 *
 * @property Hopam[] $hopams
 * @property HopamComment[] $hopamComments
 * @property News[] $news
 * @property Page[] $pages
 * @property Register[] $registers
 * @property Song[] $songs
 * @property UserClass[] $userClasses
 * @property Video[] $videos
 * @property VideoComment[] $videoComments
 */
abstract class BaseXfUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'xf_user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ThÃ nh viÃªn', $n);
	}

	public static function representingColumn() {
		return 'username';
	}

	public function rules() {
		return array(
			array('username, email, language_id, style_id, timezone, user_group_id, secondary_group_ids, permission_combination_id', 'required'),
			array('visible, conversations_unread, alerts_unread, avatar_width, avatar_height, is_moderator, is_admin, is_banned', 'numerical', 'integerOnly'=>true),
			array('username, custom_title, timezone', 'length', 'max'=>50),
			array('email, gravatar', 'length', 'max'=>120),
			array('gender', 'length', 'max'=>6),
			array('language_id, style_id, user_group_id, display_style_group_id, permission_combination_id, message_count, register_date, last_activity, trophy_points, avatar_date, like_count, warning_points', 'length', 'max'=>10),
			array('secondary_group_ids, role', 'length', 'max'=>255),
			array('user_state', 'length', 'max'=>18),
			array('gender, custom_title, visible, display_style_group_id, message_count, conversations_unread, register_date, last_activity, trophy_points, alerts_unread, avatar_date, avatar_width, avatar_height, gravatar, user_state, is_moderator, is_admin, is_banned, like_count, warning_points, role', 'default', 'setOnEmpty' => true, 'value' => null),
			array('user_id, username, email, gender, custom_title, language_id, style_id, timezone, visible, user_group_id, secondary_group_ids, display_style_group_id, permission_combination_id, message_count, conversations_unread, register_date, last_activity, trophy_points, alerts_unread, avatar_date, avatar_width, avatar_height, gravatar, user_state, is_moderator, is_admin, is_banned, like_count, warning_points, role', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'hopams' => array(self::HAS_MANY, 'Hopam', 'user_id'),
			'hopamComments' => array(self::HAS_MANY, 'HopamComment', 'user_id'),
			'news' => array(self::HAS_MANY, 'News', 'user_id'),
			'pages' => array(self::HAS_MANY, 'Page', 'user_id'),
			'registers' => array(self::HAS_MANY, 'Register', 'user_id'),
			'songs' => array(self::HAS_MANY, 'Song', 'user_id'),
			'userClasses' => array(self::HAS_MANY, 'UserClass', 'user_id'),
			'videos' => array(self::HAS_MANY, 'Video', 'user_id'),
			'videoComments' => array(self::HAS_MANY, 'VideoComment', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'user_id' => Yii::t('app', 'User'),
			'username' => Yii::t('app', 'Username'),
			'email' => Yii::t('app', 'Email'),
			'gender' => Yii::t('app', 'Gender'),
			'custom_title' => Yii::t('app', 'Custom Title'),
			'language_id' => Yii::t('app', 'Language'),
			'style_id' => Yii::t('app', 'Style'),
			'timezone' => Yii::t('app', 'Timezone'),
			'visible' => Yii::t('app', 'Visible'),
			'user_group_id' => Yii::t('app', 'User Group'),
			'secondary_group_ids' => Yii::t('app', 'Secondary Group Ids'),
			'display_style_group_id' => Yii::t('app', 'Display Style Group'),
			'permission_combination_id' => Yii::t('app', 'Permission Combination'),
			'message_count' => Yii::t('app', 'Message Count'),
			'conversations_unread' => Yii::t('app', 'Conversations Unread'),
			'register_date' => Yii::t('app', 'Register Date'),
			'last_activity' => Yii::t('app', 'Last Activity'),
			'trophy_points' => Yii::t('app', 'Trophy Points'),
			'alerts_unread' => Yii::t('app', 'Alerts Unread'),
			'avatar_date' => Yii::t('app', 'Avatar Date'),
			'avatar_width' => Yii::t('app', 'Avatar Width'),
			'avatar_height' => Yii::t('app', 'Avatar Height'),
			'gravatar' => Yii::t('app', 'Gravatar'),
			'user_state' => Yii::t('app', 'User State'),
			'is_moderator' => Yii::t('app', 'Is Moderator'),
			'is_admin' => Yii::t('app', 'Is Admin'),
			'is_banned' => Yii::t('app', 'Is Banned'),
			'like_count' => Yii::t('app', 'Like Count'),
			'warning_points' => Yii::t('app', 'Warning Points'),
			'role' => Yii::t('app', 'Role'),
			'hopams' => null,
			'hopamComments' => null,
			'news' => null,
			'pages' => null,
			'registers' => null,
			'songs' => null,
			'userClasses' => null,
			'videos' => null,
			'videoComments' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('gender', $this->gender, true);
		$criteria->compare('custom_title', $this->custom_title, true);
		$criteria->compare('language_id', $this->language_id, true);
		$criteria->compare('style_id', $this->style_id, true);
		$criteria->compare('timezone', $this->timezone, true);
		$criteria->compare('visible', $this->visible);
		$criteria->compare('user_group_id', $this->user_group_id, true);
		$criteria->compare('secondary_group_ids', $this->secondary_group_ids, true);
		$criteria->compare('display_style_group_id', $this->display_style_group_id, true);
		$criteria->compare('permission_combination_id', $this->permission_combination_id, true);
		$criteria->compare('message_count', $this->message_count, true);
		$criteria->compare('conversations_unread', $this->conversations_unread);
		$criteria->compare('register_date', $this->register_date, true);
		$criteria->compare('last_activity', $this->last_activity, true);
		$criteria->compare('trophy_points', $this->trophy_points, true);
		$criteria->compare('alerts_unread', $this->alerts_unread);
		$criteria->compare('avatar_date', $this->avatar_date, true);
		$criteria->compare('avatar_width', $this->avatar_width);
		$criteria->compare('avatar_height', $this->avatar_height);
		$criteria->compare('gravatar', $this->gravatar, true);
		$criteria->compare('user_state', $this->user_state, true);
		$criteria->compare('is_moderator', $this->is_moderator);
		$criteria->compare('is_admin', $this->is_admin);
		$criteria->compare('is_banned', $this->is_banned);
		$criteria->compare('like_count', $this->like_count, true);
		$criteria->compare('warning_points', $this->warning_points, true);
		$criteria->compare('role', $this->role, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
            'pagination'=>array(
                'pageSize'=>Yii::app()->params['itemsPerPage'],
            ),
		));
	}
}